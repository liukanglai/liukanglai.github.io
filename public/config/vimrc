" === Auto load for first time uses

if empty(glob($HOME.'/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo $HOME/.config/nvim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if empty(glob('$HOME/.vim/autoload/plug.vim'))
  silent ! curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" === Create a _machine_specific.vim file to adjust machine specific stuff, like python interpreter location
"
"let has_machine_specific_file = 1
"if empty(glob('~/.config/nvim/_machine_specific.vim'))
	"let has_machine_specific_file = 0
	"silent! exec "!cp ~/.config/nvim/default_configs/_machine_specific_default.vim ~/.config/nvim/_machine_specific.vim"
"endif
"source $XDG_CONFIG_HOME/nvim/_machine_specific.vim


"" Open the _machine_specific.vim file if it has just been created
"if has_machine_specific_file == 0
	"exec "e ~/.config/nvim/_machine_specific.vim"
"endif

" ===
" === 1Basic Mappings
" ===
let mapleader = ' '

" 可视模式下系统粘贴
vnoremap Y "+y

inoremap <C-a> <ESC>A
 
noremap Q :q!<CR>
noremap <LEADER>ww :wq<CR>
noremap <LEADER>ri :tabnew $HOME/.config/nvim/init.vim<CR>
noremap <LEADER>rc :tabnew $HOME/.vim/vimrc<CR>
" <LEADER>rn: rename

"map <LEADER>e :Ex<CR> 
map <LEADER>o :noh<CR> 
map <LEADER>0  $

"" === Tab management
map <LEADER>tt :tabnew 
noremap <LEADER>tN :-tabnext<CR>
noremap <LEADER>tn :+tabnext<CR>
"noremap tmn :-tabmove<CR>
"noremap tmi :+tabmove<CR>

map <LEADER>fo za
map <LEADER>fu zR
map <LEADER>fi zM

noremap tn :NERDTree<CR>
noremap tt :Tagbar<CR>
noremap tl :LLPStartPreview<CR>
"noremap tr :source %<CR>
"noremap tc :w<CR>:so %<CR>
noremap tmm :MarkdownPreview<CR>
noremap tma :TableModeToggle<CR>
nnoremap tu :UndotreeToggle<CR>

" 函数跳转
"noremap <leader>] :YcmCompleter GoTo<cr>  


" Adjacent duplicate words 查找相邻相同的词
"noremap <LEADER>dw /\(\<\w\+\>\)\_s*\1

" Space to Tab
"nnoremap <LEADER>tt :%s/    /\t/g
"vnoremap <LEADER>tt :s/    /\t/g


" === Window management
" Use <space> + new arrow keys for moving the cursor around windows
noremap <LEADER>wk <C-w>k
noremap <LEADER>wj <C-w>j
noremap <LEADER>wh <C-w>h
noremap <LEADER>wl <C-w>l

" Press <SPACE> + q to close the window below the current window
noremap <LEADER>wq <C-w>j:q<CR>

" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
"noremap <LEADER>ws :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
noremap <LEADER>ws :set splitbelow<CR>:split<CR>
"noremap <LEADER>wv :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
noremap <LEADER>wv :set splitright<CR>:vsplit<CR>

" ===
" === Markdown Settings
" ===
" Snippets
"source $XDG_CONFIG_HOME/nvim/md-snippets.vim
" auto spell
"autocmd BufRead,BufNewFile *.md setlocal spell


"" ===
"" === Other useful stuff
"" ===
"" Open a new instance of st with the cwd
"nnoremap \t :tabe<CR>:-tabmove<CR>:term sh -c 'st'<CR><C-\><C-N>:q<CR>

"" Opening a terminal window
"noremap <LEADER>/ :set splitbelow<CR>:split<CR>:res +10<CR>:term<CR>

"" Press space twice to jump to the next '<++>' and edit it
"noremap <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l

"" Spelling Check with <space>sc
"noremap <LEADER>sc :set spell!<CR>

"noremap <C-c> zz

"" Auto change directory to current dir
"autocmd BufEnter * silent! lcd %:p:h

"" Call figlet
"noremap tx :r !figlet

"" find and replace
"noremap \s :%s//g<left><left>


"" press f10 to show hlgroup
"function! SynGroup()
	"let l:s = synID(line('.'), col('.'), 1)
	"echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
"endfun
"map <F10> :call SynGroup()<CR>

"" Compile function
"noremap r :call CompileRunGcc()<CR>
"func! CompileRunGcc()
	"exec "w"
	"if &filetype == 'c'
		"exec "!g++ % -o %<"
		"exec "!time ./%<"
	"elseif &filetype == 'cpp'
		"set splitbelow
		"exec "!g++ -std=c++11 % -Wall -o %<"
		":sp
		":res -15
		":term ./%<
	"elseif &filetype == 'java'
		"set splitbelow
		":sp
		":res -5
		"term javac % && time java %<
	"elseif &filetype == 'sh'
		":!time bash %
	"elseif &filetype == 'python'
		"set splitbelow
		":sp
		":term python3 %
	"elseif &filetype == 'html'
		"silent! exec "!".g:mkdp_browser." % &"
	"elseif &filetype == 'markdown'
		"exec "InstantMarkdownPreview"
	"elseif &filetype == 'tex'
		"silent! exec "VimtexStop"
		"silent! exec "VimtexCompile"
	"elseif &filetype == 'dart'
		"exec "CocCommand flutter.run -d ".g:flutter_default_device." ".g:flutter_run_args
		"silent! exec "CocCommand flutter.dev.openDevLog"
	"elseif &filetype == 'javascript'
		"set splitbelow
		":sp
		":term export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
	"elseif &filetype == 'go'
		"set splitbelow
		":sp
		":term go run .
	"endif
"endfunc

"" <f5> 编译和运行C map <LEADER>r :call CompileRunGcc()<cr>
"map <LEADER>r :call CompileRunGcc()<cr>
"func! CompileRunGcc()
"exec "w"
"exec "!gcc % -o %<"
"exec "! ./%<"
"endfunc

""< F5> 编译和运行C++
"map <f5> :call CompileRunGpp()<cr>
"func! CompileRunGpp()
"exec "w"
"exec "!g++ % -o %<"
"exec "! ./%<"
"exec "! rm %<"
"endfunc

"" <f5> 运行python程序
"map <f5> :w<cr>:!python %<cr>

"" <f5> 运行shell程序
"map <f5> :call CompileRunSH()<cr>
"func! CompileRunSH()
"exec "w"
"exec "!chmod a+x %"
"exec "!./%"
"endfunc

""<f9>  gdb调试
"map <LEADER>d :call Debug()<cr>
"func!  Debug()
"exec "w"
"exec "!gcc -g -o %< %"
"exec ":Termdebug %<"
"exec "! rm %<"
"endfunc
""</cr></f9></f9></cr></f5></f5></cr></cr></f5></f5></cr></f5></cr></f5></f5>

autocmd BufNewFile *.py,*.cc,*.sh,*.java exec ":call SetTitle()"
func SetTitle()
    if expand ("%:e") == 'sh'
        call setline(1, "#!/bin/bash")
        call setline(2, "#Author:bert")
        call setline(3, "#Blog:https://blog.51cto.com/zpf666")
        call setline(4, "#Time:".strftime("%F %T"))
        call setline(5, "#Name:".expand("%"))
        call setline(6, "#Version:V1.0")
        call setline(7, "#Description:This is a production script.")
    endif
endfunc


" ===
" === 2Terminal Colors
" ===

let g:terminal_color_0  = '#000000'
let g:terminal_color_1  = '#FF5555'
let g:terminal_color_2  = '#50FA7B'
let g:terminal_color_3  = '#F1FA8C'
let g:terminal_color_4  = '#BD93F9'
let g:terminal_color_5  = '#FF79C6'
let g:terminal_color_6  = '#8BE9FD'
let g:terminal_color_7  = '#BFBFBF'
let g:terminal_color_8  = '#4D4D4D'
let g:terminal_color_9  = '#FF6E67'
let g:terminal_color_10 = '#5AF78E'
let g:terminal_color_11 = '#F4F99D'
let g:terminal_color_12 = '#CAA9FA'
let g:terminal_color_13 = '#FF92D0'
let g:terminal_color_14 = '#9AEDFE'

" UI

set termguicolors " 真彩色
"set t_Co=256
set laststatus=2 " always show status bar

" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} " status line
" tags父目录递归查找 ;表示持续查找
"set tags=tags;
" Regenerate tags when saving Python files.
"autocmd BufWritePost *.py silent! !ctags -R &
"autocmd BufWritePost *.c silent! !ctags -R &
"autocmd BufWritePost *.cpp silent! !ctags -R &


" ====================
" === 3Editor Setup ===
" ====================
" ===
" === System
" ===
"set clipboard=unnamedplus
"set clipboard+=unnamedplus
" 配色
let &t_ut='' 
set autochdir
"光标不同显示
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif
set encoding=utf-8
"set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"设置文件编码"
"set fileencodings=utf-8 
"设置终端编码"
"set termencoding=utf-8 
"设置语言编码"
"set langmenu=zh_CN.UTF-8 
"显示中文帮助"
"set helplang=cn 

" ===
" === Necessary Commands to Execute
" ===
exec "nohlsearch"

filetype on
filetype plugin on
filetype indent on
filetype plugin indent on 

" ===
" === Editor behavior
" ===
"set exrc
"set secure
set number
set relativenumber

"用浅色高亮显示当前行"
set nocursorcolumn "竖
set cursorline "横
autocmd InsertLeave * se cul
autocmd InsertEnter * se nocul

set hidden
set expandtab " tab 展开为空格
"set noexpandtab
set smarttab
set shiftwidth=2
"set softtabstop=2
set tabstop=2
"set autoindent
"开启新行时使用智能自动缩进"
set smartindent
set cindent
set list
"set listchars=tab:\|\ ,trail:▫
set scrolloff=5 "光标移动到buffer的顶部和底部时保持5行距离
set ttimeoutlen=0
"set ttimeoutlen=100
"set notimeout

set viewoptions=cursor,folds,slash,unix
set wrap "自动换行”
set tw=0 "光标超过0列折行
set indentexpr=
set showmatch " 括号匹配
set sm "显示括号配对情况。打开这个选项后，当输入后括号(包括小括号、中括号、大括号) 的时候，光标会跳回前括号片刻，然后跳回来，以此显示括号的配对情况。

" autocmd BUfRead * normal zR " open a file, open all fold.
"set foldmethod=indent " use indent to fold
"set foldlevel=99
set foldenable
set formatoptions-=tc
set splitright
set splitbelow
set noshowmode
set showcmd " last command
set wildmenu "增强模式中的命令行自动完成操作"
set ignorecase
set smartcase
syntax on
set autoread
set report=0 "通过使用: commands命令，告诉我们文件的哪一行被改变过"
"被分割的窗口间显示空白，便于阅读"
set fillchars=vert:\ ,stl:\ ,stlnc:\
set spell " 拼写检查 (c-x, than s)
set ruler "显示标尺"

set backspace=eol,start,indent "使回格键（backspace）正常处理indent, eol, start等"
highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
set hlsearch
set incsearch
set wildignorecase

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
"set inccommand=split

"文件类型自动检测，代码智能补全"
set completeopt=longest,noinsert,menuone,noselect,preview
set ttyfast "should make scrolling faster
set lazyredraw "same as above
set visualbell
"silent !mkdir -p $HOME/.config/nvim/tmp/backup
"silent !mkdir -p $HOME/.config/nvim/tmp/undo
"silent !mkdir -p $HOME/.config/nvim/tmp/sessions
"set backupdir=$HOME/.config/nvim/tmp/backup,.
"set directory=$HOME/.config/nvim/tmp/backup,.
"if has('persistent_undo')
	"set undofile
	"set undodir=$HOME/.config/nvim/tmp/undo,.
"endif

silent !mkdir -p $HOME/.vim/tmp/backup
silent !mkdir -p $HOME/.vim/tmp/undo
silent !mkdir -p $HOME/.vim/tmp/sessions
set backupdir=$HOME/.vim/tmp/backup,.
set directory=$HOME/.vim/tmp/backup,.
if has('persistent_undo')
	set undofile
	set undodir=$HOME/.vim/tmp/undo,.
endif

"set colorcolumn=100 中间线
set updatetime=100
set virtualedit=block

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" ===
" === 4Terminal Behaviors
" ===
"let g:neoterm_autoscroll = 1
"autocmd TermOpen term://* startinsert
"tnoremap <C-N> <C-\><C-N>
"tnoremap <C-O> <C-\><C-N><C-O>

" ===
" === 5Install Plugins with Vim-Plug
" ===


"" Plug 'LoricAndre/fzterm.nvim'


"" Status line
"Plug 'theniceboy/eleline.vim'
"Plug 'ojroques/vim-scrollstatus'

"" General Highlighter
"Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
"Plug 'RRethy/vim-illuminate'

"" File navigation
""Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
""Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'junegunn/fzf.vim'
"Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"Plug 'kevinhwang91/rnvimr'
"Plug 'airblade/vim-rooter'
"Plug 'pechorin/any-jump.vim'

"" Taglist
"Plug 'liuchengxu/vista.vim'

"" Debugger
"" Plug 'puremourning/vimspector', {'do': './install_gadget.py --enable-c --enable-python --enable-go'}


"" Go
"Plug 'fatih/vim-go' , { 'for': ['go', 'vim-plug'], 'tag': '*' }

"" Python
"" Plug 'tmhedberg/SimpylFold', { 'for' :['python', 'vim-plug'] }
"Plug 'Vimjas/vim-python-pep8-indent', { 'for' :['python', 'vim-plug'] }
"Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins', 'for' :['python', 'vim-plug'] }
""Plug 'vim-scripts/indentpython.vim', { 'for' :['python', 'vim-plug'] }
""Plug 'plytophogy/vim-virtualenv', { 'for' :['python', 'vim-plug'] }
"Plug 'tweekmonster/braceless.vim', { 'for' :['python', 'vim-plug'] }

"" Flutter
"" Plug 'dart-lang/dart-vim-plugin'
"Plug 'f-person/pubspec-assist-nvim', { 'for' : ['pubspec.yaml'] }

"" Swift
"Plug 'keith/swift.vim'
"Plug 'arzg/vim-swift'

"" Other filetypes
"" Plug 'jceb/vim-orgmode', {'for': ['vim-plug', 'org']}

"" Editor Enhancement
""Plug 'Raimondi/delimitMate'
"Plug 'jiangmiao/auto-pairs'
"Plug 'mg979/vim-visual-multi'
"Plug 'tomtom/tcomment_vim' " in <space>cn to comment a line
"Plug 'theniceboy/antovim' " gs to switch
"Plug 'tpope/vim-surround' " type yskw' to wrap the word with '' or type cs'` to change 'word' to `word`
"Plug 'gcmt/wildfire.vim' " in Visual mode, type k' to select all text in '', or type k) k] k} kp
"Plug 'junegunn/vim-after-object' " da= to delete what's after =
"Plug 'godlygeek/tabular' " ga, or :Tabularize <regex> to align
"Plug 'tpope/vim-capslock'	" Ctrl+L (insert) to toggle capslock
"Plug 'easymotion/vim-easymotion'
"" Plug 'Konfekt/FastFold'
""Plug 'junegunn/vim-peekaboo'
""Plug 'wellle/context.vim'
"Plug 'svermeulen/vim-subversive'
"Plug 'theniceboy/argtextobj.vim'
"Plug 'rhysd/clever-f.vim'
"Plug 'AndrewRadev/splitjoin.vim'
"Plug 'theniceboy/pair-maker.vim'
"Plug 'theniceboy/vim-move'
"" Plug 'jeffkreeftmeijer/vim-numbertoggle'
"Plug 'Yggdroot/indentLine'

"" For general writing
"" Plug 'junegunn/goyo.vim'
""Plug 'reedes/vim-wordy'
""Plug 'ron89/thesaurus_query.vim'

"" Documentation
""Plug 'KabbAmine/zeavim.vim' " <LEADER>z to find doc

"" Mini Vim-APP
""Plug 'jceb/vim-orgmode'
""Plug 'mhinz/vim-startify'
"Plug 'skywind3000/asynctasks.vim'
"Plug 'skywind3000/asyncrun.vim'


call plug#begin('~/.vim/plugged')

" tabline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" use theme
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ajmwagar/vim-deus'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" ()color
" Plug 'luochen1990/rainbow'

" Other visual enhancement
"Plug 'mg979/vim-xtabline'
"Plug 'ryanoasis/vim-devicons'
"Plug 'wincent/terminus'

" type
Plug 'rlue/vim-barbaric'
" Plug 'lyokha/vim-xkbswitch' let g:XkbSwitchEnabled = 1

" type
" can complete the () and so on
Plug 'raimondi/delimitmate'

" search
" Plug 'mileszs/ack.vim'  
" Plug 'ctrlpvim/ctrlp.vim'

" Find & Replace
"Plug 'brooth/far.vim', { 'on': ['F', 'Far', 'Fardo'] }

" File navigation
Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'ap/vim-buftabline'

" search fzf ack

" 键映射
" [f [b
Plug 'tpope/vim-unimpaired'
" <leader><leader>+
Plug 'easymotion/vim-easymotion'
" assignment promot
" Plug 'Shougo/echodoc.vim'

" Undo Tree 修改历史
"noremap <f5> :GundoToggle<cr>
" Plug 'sjl/gundo.vim'
Plug 'mbbill/undotree'

" register
Plug 'junegunn/vim-peekaboo'

" mark
Plug 'kshenoy/vim-signature'
" Bookmarks
" Plug 'MattesGroeger/vim-bookmarks'

" Code 
" see
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
" 相同字符串下划线
Plug 'itchyny/vim-cursorword'
" highlight
Plug 'octol/vim-cpp-enhanced-highlight'
"" Treesitter
" Plug 'nvim-treesitter/nvim-treesitter'
" Plug 'nvim-treesitter/playground'

" comment
" in <space>cc to comment a line
Plug 'scrooloose/nerdcommenter' 

" Taglist
" Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }                    

" 项目文件，跳转 
"Plug 'ludovicchabant/vim-gutentags'
" change to .h file, :A :AT ...

" Error checking
Plug 'dense-analysis/ale'
" Plug 'scrooloose/syntastic'

"" Autoformat
Plug 'google/vim-maktaba' " for vimscript
Plug 'google/vim-codefmt'
" post install (yarn install | npm install) then load plugin only for editing supported files
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Auto Complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Valloric/YouCompleteMe', {'do': './install.py'}
"Plug 'wellle/tmux-complete.vim'

" snippets
" Track the engine.
" Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
 "Plug 'honza/vim-snippets'
" cs"(
" Plug 'tpope/vim-surround'

" debug
"Plug 'puremourning/vimspector'


" lanuguage
" CSharp
"Plug 'OmniSharp/omnisharp-vim'
"Plug 'ctrlpvim/ctrlp.vim' , { 'for': ['cs', 'vim-plug'] } " omnisharp-vim dependency

" Python
" Plug 'vim-scripts/indentpython.vim'


" distraction free writing mode
" Plug 'junegunn/goyo.vim' 

" Git
" Plug 'rhysd/conflict-marker.vim'
" Plug 'tpope/vim-fugitive'
" Plug 'mhinz/vim-signify'
" Plug 'gisphm/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }
"Plug 'fszymanski/fzf-gitignore', { 'do': ':UpdateRemotePlugins' }
"Plug 'airblade/vim-gitgutter'
"Plug 'cohama/agit.vim'
"Plug 'kdheepak/lazygit.nvim'

"" HTML, CSS, JavaScript, Typescript, PHP, JSON, etc.
" Plug 'elzr/vim-json'
" Plug 'hail2u/vim-css3-syntax'
" Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
" Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
" HTML
" Plug 'mattn/emmet-vim'
"
Plug 'neoclide/jsonc.vim'
Plug 'othree/html5.vim'
"Plug 'alvan/vim-closetag'
"" Plug 'hail2u/vim-css3-syntax' " , { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"" Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
 Plug 'pangloss/vim-javascript', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"Plug 'yuezk/vim-js', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"" Plug 'MaxMEllon/vim-jsx-pretty', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'jelera/vim-javascript-syntax', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
""Plug 'jaxbot/browserlink.vim'
"Plug 'HerringtonDarkholme/yats.vim'
"" Plug 'posva/vim-vue'
"" Plug 'evanleck/vim-svelte', {'branch': 'main'}
"" Plug 'leafOfTree/vim-svelte-plugin'
"" Plug 'leafgarland/typescript-vim'
"Plug 'MaxMEllon/vim-jsx-pretty'
"Plug 'leafgarland/typescript-vim'
"Plug 'peitalin/vim-jsx-typescript'
"Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
"Plug 'pantharshit00/vim-prisma'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for': ['markdown', 'vim-plug'] }
"Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
" 补全
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle', 'for': ['text', 'markdown', 'vim-plug'] }
" dictionary
"Plug 'mzlogin/vim-markdown-toc', { 'for': ['gitignore', 'markdown', 'vim-plug'] }
"Plug 'dkarter/bullets.vim'
" 格式
"Plug 'godlygeek/tabular' "必要插件，安装在vim-markdown前面
" Plug 'plasticboy/vim-markdown', { 'for': 'markdown'}

" 自定义
"Plug 'vimwiki/vimwiki'

" Latex
"Plug 'lervag/vimtex'
"Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }

" Other useful utilities
" Plug 'terryma/vim-multiple-cursors'
"Plug 'lambdalisue/suda.vim' " do stuff like :sudowrite
"" Plug 'makerj/vim-pdf'
""Plug 'xolox/vim-session'
""Plug 'xolox/vim-misc' " vim-session dep

" Dependencies
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'kana/vim-textobj-user'
" Plug 'fadein/vim-FIGlet'
" Plug 'roxma/nvim-yarp'

call plug#end()

" Config

" let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
" latex
let g:livepreview_engine = 'xelatex'

set background=dark

let g:airline_theme='gruvbox'
colorscheme gruvbox 
"colorscheme dracula
let g:gruvbox_italic=1

"set t_Co=256
"set termguicolors
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"colorscheme deus
"let g:deus_termcolors=256
"let g:airline_theme='luna'

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'

" type

" indent
let g:indentLine_enabled = 1
"let g:indentLine_char_list = ['┆']
let g:indentLine_char_list = ['¦']

" code


" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
"  所生成的数据文件的名称 "
" let g:gutentags_ctags_tagfile = '.tags'
"  将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
"  检测 ~/.cache/tags 不存在就新建 "
" if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
" endif
"  配置 ctags 的参数 "
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']


" ===
" === nvim-treesitter
" ===
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   ensure_installed = {"typescript", "dart", "java"},     -- one of "all", "language", or a list of languages
"   highlight = {
"     enable = true,              -- false will disable the whole extension
"     disable = { "c", "rust" },  -- list of language that will be disabled
"   },
" }
" EOF

"NERDTree
"autocmd VimEnter * NERDTree | wincmd p
"let NERDTreeShowBookmarks = 1
" directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" syntastic

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" Youcompleteme

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gi :YcmCompleter GoToDefinitionElseDeclaration<CR>


 set completeopt=menu,menuone
 let g:ycm_add_preview_to_completeopt = 0
 let g:ycm_show_diagnostics_ui = 0
 let g:ycm_server_log_level = 'info'
 let g:ycm_min_num_identifier_candidate_chars = 2
 let g:ycm_collect_identifiers_from_comments_and_strings = 1
 let g:ycm_complete_in_strings=1
 let g:ycm_key_invoke_completion = '<c-z>'
 noremap <c-z> <NOP>
 
 let g:ycm_semantic_triggers =  {
       \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
       \ 'cs,lua,javascript': ['re!\w{2}'],
       \ }
 let g:ycm_filetype_whitelist = { 
       \ "c":1,
       \ "cpp":1, 
       \ "objc":1,
       \ "sh":1,
       \ "zsh":1,
       \ "zimbu":1,
       \ "markdown":1,
       \ }
 

"vimspector

"let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector

" Snippets

" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"let g:ale_linters = {
"\    'javascript': ['eslint'],
"\    'css': ['stylelint'],
"\ 'cpp': ['clang'],
"\ 'c': ['clang'],
"\ 'python': ['pylint'],
"\}

"let g:ale_fixers = {
"\    'javascript': ['eslint'],
"\    'css': ['stylelint'],
"\}
"let g:ale_fix_on_save = 1

"let g:ale_sign_column_always = 1
let g:ale_sign_error = '●'
let g:ale_sign_warning = '▶'

" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> tam <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> tan <Plug>(ale_next_wrap)

" google/codefmt
augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript,arduino AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  "" Alternative: autocmd FileType python AutoFormatBuffer autopep8
  autocmd FileType rust AutoFormatBuffer rustfmt
  autocmd FileType vue AutoFormatBuffer prettier
augroup END

